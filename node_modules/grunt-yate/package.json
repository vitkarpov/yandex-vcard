{
  "name": "grunt-yate",
  "description": "Yate compiler plugin",
  "version": "0.2.2",
  "homepage": "https://github.com/lapple/grunt-yate",
  "author": {
    "name": "lapple",
    "email": "yuldoshev.aziz@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lapple/grunt-yate.git"
  },
  "bugs": {
    "url": "https://github.com/lapple/grunt-yate/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/lapple/grunt-yate/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1",
    "yate": ">=0.0.72"
  },
  "dependencies": {
    "temporary": "0.0.5"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-yate\n\n> Yate compiler plugin\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-yate --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```javascript\ngrunt.loadNpmTasks('grunt-yate');\n```\n\n## The \"yate\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `yate` to the data object passed into `grunt.initConfig()`.\n\n```javascript\ngrunt.initConfig({\n  yate: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.runtime\nType: `Boolean`\nDefault value: `false`\n\nPrepend destination file with `runtime.js` library from [yate](https://github.com/pasaran/yate).\n\n#### options.import\nType: `Array`\n\nFile pattern or array of patterns to load modules from.\n\n#### options.autorun\nType: `Boolean|String|Object`\nDefault value: `false`\n\nCreate autorunning templates.\n\n- Pass `true` to automatically run `main` module.\n- Pass a string to autorun specific module.\n- Pass `{module: \"moduleTitle\", mode: \"modeName\"}` to specify both module and mode.\n\n#### options.modular\nType: `Boolean`\nDefault value: `false`\n\n`module.exports` main template function so that it can be required as a node module.\n\n#### options.externals\nType: `String|Array`\n\nFile pattern or array of patterns to load external functions from. Functions should be\ndefined in `yr.externals` namespace.\n\n#### options.postprocess\nType: `Function`\n\nDefine compiled code transformation or extension.\n\n```javascript\ngrunt.initConfig({\n  yate: {\n    options: {\n      postprocess: function(code) {\n        // Example: augment particular strings at compile time:\n        return code.replace('{time}', Date.now());\n      }\n    }\n    // ...\n  }\n});\n```\n\n#### options.writeAST\nType: `Boolean`\nDefault value: `false`\n\nWrite parsed AST files at the location of templates. Should speed up builds as the parsing stage is skipped for unchanged files.\n\n### Usage Examples\n\nCompile single file:\n\n```javascript\ngrunt.initConfig({\n  yate: {\n    options: {},\n    dist: {\n      files: {\n        'templates/compiled/index.js': [\n          'templates/src/index.yate',\n          'templates/src/blocks/*.yate'\n        ]\n      }\n    }\n  }\n});\n```\n\nCompile multiple files, using one-to-one mapping:\n\n```javascript\ngrunt.initConfig({\n  yate: {\n    options: {\n      runtime: false\n    },\n    dist: {\n      files: [\n        {\n          dest: 'templates/compiled/',\n          src: 'templates/src/*.yate',\n          ext: '.js',\n          expand: true,\n          flatten: true\n        }\n      ]\n    }\n  }\n});\n```\n\n#### Using imports\n\nYATE module:\n```html\nmodule \"module1\"\nmatch .* module1-match1 {\n\n}\n```\nYATE template:\n```html\nmodule \"tmpl1\"\nimport \"module1\"\nmatch / xb-button {\n    apply .* module1-match1\n}\n```\n\n```javascript\ngrunt.initConfig({\n  yate: {\n    options: {\n      import: [\n        'lib/**/*.yate.obj'\n      ]\n    },\n    dist: {\n      files: [\n        {\n          dest: 'templates/compiled/',\n          src: 'templates/src/*.yate',\n          ext: '.js',\n          expand: true,\n          flatten: true\n        }\n      ]\n    }\n  }\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-yate@0.2.2",
  "dist": {
    "shasum": "4d88728362d95a8896fb083af727930bb9db7a8a"
  },
  "_from": "grunt-yate@~0.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-yate/-/grunt-yate-0.2.2.tgz"
}
